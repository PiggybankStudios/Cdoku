{
	"folders":
	[
		{
			"path": ".",
			"folder_exclude_patterns": [
				"engine",
				"lib",
				"build/PigSudoku.pdx",
			],
		},
		{
			"name": "PigEngine (Playdate)",
			"path": "engine/platform/playdate",
		},
		{
			"name": "GyLib",
			"path": "lib/include/gylib",
		},
		{
			"path": "F:\\Programs\\PlaydateSDK",
			"folder_exclude_patterns":
			[
				".sentry-native",
				"bin",
				"Designing for Playdate",
				"Disk",
				"Inside Playdate",
				"PlaydateSDK.docset",
				"resources",
				"C_API/buildsupport",
				"CoreLibs/assets",
			],
			"file_exclude_patterns":
			[
				"*.html",
				"*.css",
			],
		},
	],
	"settings":
	{
		"build_options":
		[
		],
		"custom_constants":
		[
			"AppState_Game",
			"AppState_MainMenu",
			"AppState_None",
			"AppState_NumStates",
			"Axis_All2",
			"Axis_All3",
			"Axis_All4",
			"Axis_Count",
			"Axis_None",
			"Axis_W",
			"Axis_X",
			"Axis_Y",
			"Axis_Z",
			"BOARD_HEIGHT",
			"BOARD_MARGIN",
			"BOARD_OUTLINE_THICKNESS",
			"BOARD_WIDTH",
			"Box_Zero",
			"Boxi_Zero",
			"CELL_DIVIDER_THICKNESS",
			"CURSOR_INNER_MARGIN",
			"CURSOR_MAX_PREV_POSITIONS",
			"CURSOR_NOTE_TAKING_ANIM_TIME",
			"CURSOR_OUTLINE_THICKNESS",
			"CURSOR_PREV_POS_ANIM_TIME",
			"CellFlag_Conflict",
			"CellFlag_Filled",
			"CellFlag_IsGiven",
			"CellFlag_None",
			"CellFlag_NumFlags",
			"Dir2Ex_All",
			"Dir2Ex_BottomLeft",
			"Dir2Ex_BottomRight",
			"Dir2Ex_Cardinal",
			"Dir2Ex_Count",
			"Dir2Ex_Diagonal",
			"Dir2Ex_Down",
			"Dir2Ex_Left",
			"Dir2Ex_None",
			"Dir2Ex_Right",
			"Dir2Ex_TopLeft",
			"Dir2Ex_TopRight",
			"Dir2Ex_Up",
			"Dir2_All",
			"Dir2_Count",
			"Dir2_Down",
			"Dir2_Left",
			"Dir2_None",
			"Dir2_Right",
			"Dir2_Up",
			"Dir3Ex_All",
			"Dir3Ex_Backward",
			"Dir3Ex_BottomLeftBack",
			"Dir3Ex_BottomLeftFront",
			"Dir3Ex_BottomRightBack",
			"Dir3Ex_BottomRightFront",
			"Dir3Ex_Cardinal",
			"Dir3Ex_Count",
			"Dir3Ex_Diagonal",
			"Dir3Ex_Down",
			"Dir3Ex_Forward",
			"Dir3Ex_Left",
			"Dir3Ex_None",
			"Dir3Ex_Right",
			"Dir3Ex_TopLeftBack",
			"Dir3Ex_TopLeftFront",
			"Dir3Ex_TopRightBack",
			"Dir3Ex_TopRightFront",
			"Dir3Ex_Up",
			"Dir3_All",
			"Dir3_Backward",
			"Dir3_Count",
			"Dir3_Down",
			"Dir3_Forward",
			"Dir3_Left",
			"Dir3_None",
			"Dir3_Right",
			"Dir3_Up",
			"FIRST_APP_STATE",
			"GAME_COMPLETION_ANIM_TIME",
			"GAME_VERSION_BUILD",
			"GAME_VERSION_MAJOR",
			"GAME_VERSION_MINOR",
			"GROUP_DIVIDER_THICKNESS",
			"GROUP_HEIGHT",
			"GROUP_WIDTH",
			"MAIN_FONT_PATH",
			"MAX_NUM_OFFSCREEN_BITMAPS",
			"MAX_NUM_OFFSCREEN_DIRTY_RECS",
			"MAX_NUM_PERF_TIMERS",
			"MIN_CELL_SIZE",
			"MMENU_BTN_FONT_PATH",
			"MMENU_BTN_HORIZONTAL_PADDING",
			"MMENU_BTN_SPACING",
			"MMENU_BTN_TOP_BOTTOM_MARGIN",
			"MMENU_BTN_VERTICAL_PADDING",
			"MMENU_CRANK_MOVE_DELTA",
			"MMENU_LEVEL_BTN_FONT_PATH",
			"MMENU_LEVEL_BTN_HORIZONTAL_PADDING",
			"MMENU_LEVEL_BTN_VERTICAL_PADDING",
			"MMENU_NUM_SAVE_FILE_CHECKS_PER_FRAME",
			"MMENU_SCROLL_LAG",
			"MMENU_SCROLL_PAST",
			"MMENU_TITLE_FONT_PATH",
			"MMenuAction_Back",
			"MMenuAction_Exit",
			"MMenuAction_Level",
			"MMenuAction_None",
			"MMenuAction_NumActions",
			"MMenuAction_Play",
			"MMenuAction_Settings",
			"MMenuSubMenu_LevelSelect",
			"MMenuSubMenu_None",
			"MMenuSubMenu_NumSubMenus",
			"MMenuSubMenu_Options",
			"MyStr_Empty",
			"MyStr_Empty_Const",
			"NUM_US_PER_DAY",
			"NUM_US_PER_HOUR",
			"NUM_US_PER_MINUTE",
			"NUM_US_PER_SECOND",
			"OFFSCREEN_BITMAP_HEIGHT",
			"OFFSCREEN_BITMAP_WIDTH",
			"Obb2_Zero",
			"PERF_FORMAT_STR",
			"PLAYDATE_SCREEN_HEIGHT",
			"PLAYDATE_SCREEN_WIDTH",
			"Rec_Default",
			"Rec_Zero",
			"Reci_Zero",
			"WordBreakCharClass_AlphabeticLower",
			"WordBreakCharClass_AlphabeticUpper",
			"WordBreakCharClass_NumClasses",
			"WordBreakCharClass_Numeric",
			"WordBreakCharClass_Other",
			"WordBreakCharClass_Punctuation",
			"WordBreakCharClass_PunctuationClose",
			"WordBreakCharClass_PunctuationOpen",
			"WordBreakCharClass_Whitespace",
			"WordBreakCharClass_WordPunctuation",
		],
		"custom_functions":
		[
			"#define AllocString(arena, strPntr)",
			"#define AssertNullTerm(strPntr)",
			"#define AssertNullTerm_(strPntr)",
			"#define FreeString(arena, strPntr)",
			"#define NewStringInArena(arena, length, charPntr)",
			"#define NewStringInArenaNt(arena, nullTermStr)",
			"#define NotEmptyStr(strPntr)",
			"#define NotEmptyStr_(strPntr)",
			"#define NotNullStr(strPntr)",
			"#define NotNullStr_(strPntr)",
			"#define PERF_FORMAT(timeValueUsU64)",
			"#define StrPntrPrint(myStrPntr)",
			"#define StrPrint(myStrStruct)",
			"AppState_t InitGame()",
			"Axis_t AxisFromIndex(u64 index)",
			"Axis_t GetDir2Axis(Dir2_t dir2)",
			"Axis_t GetDir3Axis(Dir3_t dir3)",
			"BitmapData_t GetBitmapData(LCDBitmap* bitmap, bool sizeOnly = false)",
			"Cell_t* GetCell(Board_t* board, v2i gridPos)",
			"Cell_t* GetSelectedCell(Board_t* board, Cursor_t* cursor)",
			"Dir2Ex_t Dir2ExFromDir2Flags(u8 dirFlags)",
			"Dir2Ex_t Dir2ExFromIndex(u64 index)",
			"Dir2Ex_t Dir2ExOpposite(Dir2Ex_t dir2ex)",
			"Dir2_t Dir2Clockwise(Dir2_t dir2, u64 numQuarterTurns = 1)",
			"Dir2_t Dir2CounterClockwise(Dir2_t dir2, u64 numQuarterTurns = 1)",
			"Dir2_t Dir2FromCcwIndex(u64 index)",
			"Dir2_t Dir2FromCcwIndexStartingWith(Dir2_t startingDir, u64 index)",
			"Dir2_t Dir2FromCwIndex(u64 index)",
			"Dir2_t Dir2FromCwIndexStartingWith(Dir2_t startingDir, u64 index)",
			"Dir2_t Dir2FromIndex(u64 index)",
			"Dir2_t Dir2Opposite(Dir2_t dir2)",
			"Dir2_t GetCardinalDir2sFromDir2Ex(Dir2Ex_t diagonalDir)",
			"Dir2_t ToDir2(v2 vector)",
			"Dir3Ex_t Dir3ExFromIndex(u64 index)",
			"Dir3Ex_t Dir3ExOpposite(Dir3Ex_t dir3ex)",
			"Dir3_t Dir3FromIndex(u64 index)",
			"Dir3_t Dir3Opposite(Dir3_t dir3)",
			"Dir3_t ToDir3(v3 vector)",
			"FilesInDir_t GetFilesInDirectory(MyStr_t path, MemArena_t* memArena, bool includeFolders = false, bool fileNameOnly = false, bool showHidden = false)",
			"Font_t* PdBindFont(Font_t* font)",
			"LCDBitmapDrawMode PdSetDrawMode(LCDBitmapDrawMode drawMode)",
			"MMenuBtn_t* AddButtonMainMenu(MMenuAction_t action, MyStr_t displayText, MyStr_t path = MyStr_Empty_Const)",
			"MyStr_t CombineStrs(MemArena_t* memArena, MyStr_t str1, MyStr_t str2)",
			"MyStr_t ConvertUcs2StrToUtf8(MemArena_t* memArena, const wchar_t* wideStrPntr, u64 wideStrLength)",
			"MyStr_t ConvertUcs2StrToUtf8Nt(MemArena_t* memArena, const wchar_t* nullTermWideStr)",
			"MyStr_t FindStrParensPart(MyStr_t target, char openParensChar = '[', char closeParensChar = ']')",
			"MyStr_t FormatBytes(u64 numBytes, MemArena_t* memArena)",
			"MyStr_t FormatMilliseconds(u64 milliseconds, MemArena_t* memArena)",
			"MyStr_t FormatNumberWithCommas(u64 number, MemArena_t* memArena = nullptr)",
			"MyStr_t FormatRealTime(const RealTime_t* realTime, MemArena_t* memArena, bool includeDayOfWeek = true, bool includeHourMinuteSecond = true, bool includeMonthDayYear = true)",
			"MyStr_t GetDirectoryPart(MyStr_t filePath)",
			"MyStr_t GetFileNamePart(MyStr_t filePath, bool includeExtension = true)",
			"MyStr_t GetLevelSaveFilePath(MemArena_t* memArena, MyStr_t levelPath, bool completed)",
			"MyStr_t NewStr(u64 length, char* pntr)",
			"MyStr_t NewStrLengthOnly(u64 length)",
			"MyStr_t PrintInArenaStr(MemArena_t* arena, const char* formatString, ...)",
			"MyStr_t StrReplace(MyStr_t str, MyStr_t target, MyStr_t replacement, MemArena_t* memArena)",
			"MyStr_t StrSplice(MyStr_t target, u64 startIndex, u64 endIndex, MyStr_t replacement, MemArena_t* memArena)",
			"MyStr_t StrSubstring(MyStr_t* target, u64 startIndex, u64 endIndex)",
			"MyStr_t StrSubstringLength(MyStr_t* target, u64 startIndex, u64 length)",
			"MyStr_t StringRepeat(MemArena_t* memArena, MyStr_t str, u64 numRepetitions)",
			"MyStr_t TakeString(StringBuilder_t* builder, MemArena_t* memArena = nullptr)",
			"MyStr_t ToMyStr(const StringBuilder_t* builder)",
			"MyStr_t UnescapeQuotedStringInArena(MemArena_t* memArena, MyStr_t target, bool removeQuotes = true, bool allowNewLineEscapes = true, bool allowOtherEscapeCodes = false)",
			"MyStr_t* SplitString(MemArena_t* memArena, MyStr_t target, MyStr_t delineator, u64* numPiecesOut = nullptr, bool ignoreCase = false)",
			"MyWideStr_t ConvertUtf8StrToUcs2(MemArena_t* memArena, MyStr_t utf8Str)",
			"OffscreenTarget_t GetOffscreenTarget(v2i neededSize, bool forceTopLeft = false)",
			"SpriteSheet_t LoadSpriteSheet(MyStr_t path, i32 numFramesX)",
			"Texture_t CreateTexture(v2i size, u64 dataSize, const u8* pixelData, const u8* maskData = nullptr)",
			"Texture_t LoadTexture(MyStr_t path)",
			"WordBreakCharClass_t GetWordBreakCharClass(u32 codepoint)",
			"bool BoardCheckCompletion(Board_t* board)",
			"bool BoxBasicallyEqual(box left, box right, r32 tolerance = 0.001f)",
			"bool BoxesIntersect(box boundingBox1, box boundingBox2, bool inclusive = true)",
			"bool BoxiEqual(boxi left, boxi right)",
			"bool BoxisIntersect(boxi boundingBox1, boxi boundingBox2, bool inclusive = true)",
			"bool BufferIsNullTerminated(u64 bufferSize, const char* bufferPntr)",
			"bool DeleteFile(MyStr_t path)",
			"bool DeleteFolder(MyStr_t path)",
			"bool DoesFileExist(bool fromDataDir, MyStr_t path)",
			"bool DoesStrContainMultibyteUtf8Characters(MyStr_t str)",
			"bool FindNextCharInStr(MyStr_t target, u64 startIndex, MyStr_t searchCharsStr, u64* indexOut = nullptr, bool ignoreCharsInQuotes = false)",
			"bool FindNextUnknownCharInStr(MyStr_t target, u64 startIndex, MyStr_t knownCharsStr, u64* indexOut = nullptr, bool ignoreCharsInQuotes = false)",
			"bool FindNextWhitespaceInStr(MyStr_t target, u64 startIndex, u64* indexOut = nullptr, bool ignoreCharsInQuotes = false)",
			"bool FindSubstring(MyStr_t target, MyStr_t substring, u64* indexOut = nullptr, bool ignoreCase = false, u64 startIndex = 0)",
			"bool IsCardinalDir2Ex(Dir2Ex_t dir2ex, bool allowNone = false)",
			"bool IsCardinalDir3Ex(Dir3Ex_t dir3ex, bool allowNone = false)",
			"bool IsCharPairWordBreak(u32 prevCodepoint, u32 nextCodepoint, bool forward, bool subwords)",
			"bool IsDiagonalDir2Ex(Dir2Ex_t dir2ex, bool allowNone = false)",
			"bool IsDiagonalDir3Ex(Dir3Ex_t dir3ex, bool allowNone = false)",
			"bool IsEmptyStr(MyStr_t target)",
			"bool IsInsideBox(box boundingBox, v3 point)",
			"bool IsInsideBoxi(boxi boundingBox, v3i point, bool includePositiveEdges = false)",
			"bool IsInsideObb2D(obb2 rectangle, v2 point)",
			"bool IsInsideRec(rec rectangle, v2 point)",
			"bool IsInsideReci(reci rectangle, v2i point, bool includePositiveEdges = false)",
			"bool IsNullStr(MyStr_t target)",
			"bool IsSingleDir2(Dir2_t dir2, bool allowNone = false)",
			"bool IsSingleDir2Ex(Dir2Ex_t dir2ex, bool allowNone = false)",
			"bool IsSingleDir3(Dir3_t dir3, bool allowNone = false)",
			"bool IsSingleDir3Ex(Dir3Ex_t dir3ex, bool allowNone = false)",
			"bool IsStrNullTerminated(MyStr_t target)",
			"bool IsStringValidIdentifier(MyStr_t str, bool allowUnderscores = true, bool allowNumbers = true, bool allowLeadingNumbers = false, bool allowEmpty = false, bool allowSpaces = false)",
			"bool IsToDir3Ambiguous(v3i vector)",
			"bool Obb2DBasicallyEqual(obb2 left, obb2 right, r32 tolerance = 0.001f)",
			"bool ReadEntireFile(bool fromDataDir, MyStr_t path, MyStr_t* contentsOut, MemArena_t* memArena)",
			"bool RecBasicallyEqual(rec left, rec right, r32 tolerance = 0.001f)",
			"bool ReciEqual(reci left, reci right)",
			"bool RecisIntersect(reci rectangle1, reci rectangle2, bool inclusive = true)",
			"bool RecsIntersect(rec rectangle1, rec rectangle2, bool inclusive = true)",
			"bool SplitStringFixed(MyStr_t target, MyStr_t delineator, u64 numPieces, MyStr_t* piecesBuffer, bool ignoreCase = false)",
			"bool StrEndsWith(MyStr_t str, MyStr_t suffix, bool ignoreCase = false)",
			"bool StrEndsWithSlash(MyStr_t str)",
			"bool StrEquals(MyStr_t target, MyStr_t comparison)",
			"bool StrEqualsIgnoreCase(MyStr_t target, MyStr_t comparison)",
			"bool StrStartsWith(MyStr_t str, MyStr_t prefix, bool ignoreCase = false)",
			"bool StrStartsWithSlash(MyStr_t str)",
			"bool TryPackAnotherRec(reci boundingRec, u64 numExistingRecs, const reci* existingRecs, v2i newRecSize, v2i* packPosOut)",
			"bool WriteEntireFile(MyStr_t path, MyStr_t contents)",
			"box BoxCubify(box boundingBox, bool makeLarger = true, bool center = true)",
			"box BoxDeflate(box boundingBox, r32 subWidth, r32 subHeight, r32 subDepth)",
			"box BoxDeflateX(box boundingBox, r32 subWidth)",
			"box BoxDeflateY(box boundingBox, r32 subHeight)",
			"box BoxDeflateZ(box boundingBox, r32 subDepth)",
			"box BoxExpand(box boundingBox, r32 extraWidth, r32 extraHeight, r32 extraDepth)",
			"box BoxExpandX(box boundingBox, r32 extraWidth)",
			"box BoxExpandY(box boundingBox, r32 extraHeight)",
			"box BoxExpandZ(box boundingBox, r32 extraDepth)",
			"box BoxInflate(box boundingBox, r32 extraWidth, r32 extraHeight, r32 extraDepth)",
			"box BoxInflateX(box boundingBox, r32 extraWidth)",
			"box BoxInflateY(box boundingBox, r32 extraHeight)",
			"box BoxInflateZ(box boundingBox, r32 extraDepth)",
			"box BoxInvert(box boundingBox)",
			"box BoxInvertX(box boundingBox)",
			"box BoxInvertY(box boundingBox)",
			"box BoxInvertZ(box boundingBox)",
			"box BoxRetract(box boundingBox, r32 subWidth, r32 subHeight, r32 subDepth)",
			"box BoxRetractX(box boundingBox, r32 subWidth)",
			"box BoxRetractY(box boundingBox, r32 subHeight)",
			"box BoxRetractZ(box boundingBox, r32 subDepth)",
			"box BoxScale(box boundingBox, r32 scalar)",
			"box BoxScale3(box boundingBox, r32 scaleX, r32 scaleY, r32 scaleZ)",
			"box BoxShift(box boundingBox, r32 amountX, r32 amountY, r32 amountZ)",
			"box BoxUninvert(box boundingBox)",
			"box NewBox(v3 bottomLeft, v3 size)",
			"box NewBoxCentered(v3 center, v3 size)",
			"box ToBox(boxi boundingBox)",
			"boxi BoxiBoth(boxi boundingBox1, boxi boundingBox2)",
			"boxi BoxiCubify(boxi boundingBox, bool makeLarger = true)",
			"boxi BoxiDeflate(boxi boundingBox, i32 subWidth, i32 subHeight, i32 subDepth)",
			"boxi BoxiDeflateX(boxi boundingBox, i32 subWidth)",
			"boxi BoxiDeflateY(boxi boundingBox, i32 subHeight)",
			"boxi BoxiDeflateZ(boxi boundingBox, i32 subDepth)",
			"boxi BoxiExpand(boxi boundingBox, i32 extraWidth, i32 extraHeight, i32 extraDepth)",
			"boxi BoxiExpandToVec3i(boxi boundingBox, v3i newPoint)",
			"boxi BoxiExpandX(boxi boundingBox, i32 extraWidth)",
			"boxi BoxiExpandY(boxi boundingBox, i32 extraHeight)",
			"boxi BoxiExpandZ(boxi boundingBox, i32 extraDepth)",
			"boxi BoxiInflate(boxi boundingBox, i32 extraWidth, i32 extraHeight, i32 extraDepth)",
			"boxi BoxiInflateX(boxi boundingBox, i32 extraWidth)",
			"boxi BoxiInflateY(boxi boundingBox, i32 extraHeight)",
			"boxi BoxiInflateZ(boxi boundingBox, i32 extraDepth)",
			"boxi BoxiInvert(boxi boundingBox)",
			"boxi BoxiInvertX(boxi boundingBox)",
			"boxi BoxiInvertY(boxi boundingBox)",
			"boxi BoxiInvertZ(boxi boundingBox)",
			"boxi BoxiRetract(boxi boundingBox, i32 subWidth, i32 subHeight, i32 subDepth)",
			"boxi BoxiRetractX(boxi boundingBox, i32 subWidth)",
			"boxi BoxiRetractY(boxi boundingBox, i32 subHeight)",
			"boxi BoxiRetractZ(boxi boundingBox, i32 subDepth)",
			"boxi BoxiScale(boxi boundingBox, i32 scalar)",
			"boxi BoxiScale3(boxi boundingBox, i32 scaleX, i32 scaleY, i32 scaleZ)",
			"boxi BoxiShift(boxi boundingBox, i32 amountX, i32 amountY, i32 amountZ)",
			"boxi BoxiUninvert(boxi boundingBox)",
			"boxi NewBoxi(v3i bottomLeft, v3i size)",
			"boxi NewBoxiBetween(v3i point1, v3i point2)",
			"char GetDir2Char(Dir2_t dir2)",
			"char* ToStr(StringBuilder_t* builder)",
			"const char* FormatBytesNt(u64 numBytes, MemArena_t* memArena)",
			"const char* FormatMillisecondsNt(u64 milliseconds, MemArena_t* memArena)",
			"const char* FormatNumberWithCommasNt(u64 number, MemArena_t* memArena = nullptr)",
			"const char* FormatRealTimeNt(const RealTime_t* realTime, MemArena_t* memArena, bool includeDayOfWeek = true, bool includeHourMinuteSecond = true, bool includeMonthDayYear = true)",
			"const char* GetAppStateStr(AppState_t enumValue)",
			"const char* GetCellFlagStr(CellFlag_t enumValue)",
			"const char* GetDir2ExString(Dir2Ex_t dir2ex)",
			"const char* GetDir2String(Dir2_t dir2)",
			"const char* GetDir3ExString(Dir3Ex_t dir3ex)",
			"const char* GetDir3SideString(Dir3_t dir3)",
			"const char* GetDir3String(Dir3_t dir3)",
			"const char* GetFileNamePartNt(const char* filePath)",
			"const char* GetMMenuActionStr(MMenuAction_t enumValue)",
			"const char* GetMMenuSubMenuStr(MMenuSubMenu_t enumValue)",
			"const char* GetPDLanguageStr(PDLanguage language)",
			"const char* GetPDSystemEventStr(PDSystemEvent event)",
			"const char* GetWordBreakCharClassStr(WordBreakCharClass_t enumValue)",
			"i32 StrCompareIgnoreCase(MyStr_t str1, MyStr_t str2)",
			"i32 Vec3iAmountInDir(v3i vector, Dir3_t direction)",
			"obb2 NewObb2D(v2 center, v2 size, r32 rotation)",
			"obb2 Obb2DDeflate(obb2 rectangle, r32 subWidth, r32 subHeight)",
			"obb2 Obb2DDeflateX(obb2 rectangle, r32 subWidth)",
			"obb2 Obb2DDeflateY(obb2 rectangle, r32 subHeight)",
			"obb2 Obb2DInflate(obb2 rectangle, r32 extraWidth, r32 extraHeight)",
			"obb2 Obb2DInflateX(obb2 rectangle, r32 extraWidth)",
			"obb2 Obb2DInflateY(obb2 rectangle, r32 extraHeight)",
			"obb2 Obb2DInvert(obb2 rectangle)",
			"obb2 Obb2DInvertX(obb2 rectangle)",
			"obb2 Obb2DInvertY(obb2 rectangle)",
			"obb2 Obb2DScale(obb2 boundingBox, r32 scalar)",
			"obb2 Obb2DShift(obb2 boundingBox, r32 amountX, r32 amountY)",
			"obb2 Obb2DSquarify(obb2 rectangle, bool makeLarger = true)",
			"obb2 Obb2DUninvert(obb2 rectangle)",
			"obb2 Obb2Line(v2 start, v2 end, r32 thickness)",
			"obb2 ToObb2D(rec rectangle)",
			"obb3 ToObb3D(box boundingBox)",
			"r32 GetDir2AngleR32(Dir2_t dir2)",
			"r32 GetDir2ExAngleR32(Dir2Ex_t dir2ex)",
			"r64 GetDir2AngleR64(Dir2_t dir2)",
			"r64 GetDir2ExAngleR64(Dir2Ex_t dir2ex)",
			"rec GetObb2DAlignedBounds(obb2 boundingBox)",
			"rec NewRec(v2 topLeft, v2 size)",
			"rec NewRecBetween(r32 point1X, r32 point1Y, r32 point2X, r32 point2Y)",
			"rec NewRecCentered(v2 center, v2 size)",
			"rec RecBoth(rec rectangle1, rec rectangle2)",
			"rec RecDeflate(rec rectangle, r32 subWidth, r32 subHeight)",
			"rec RecDeflateX(rec rectangle, r32 subWidth)",
			"rec RecDeflateY(rec rectangle, r32 subHeight)",
			"rec RecExpand(rec rectangle, r32 extraWidth, r32 extraHeight)",
			"rec RecExpandDown(rec rectangle, r32 extraDown)",
			"rec RecExpandLeft(rec rectangle, r32 extraLeft)",
			"rec RecExpandRight(rec rectangle, r32 extraRight)",
			"rec RecExpandToVec2(rec rectangle, v2 newPoint)",
			"rec RecExpandUp(rec rectangle, r32 extraUp)",
			"rec RecExpandX(rec rectangle, r32 extraWidth)",
			"rec RecExpandY(rec rectangle, r32 extraHeight)",
			"rec RecInflate(rec rectangle, r32 extraWidth, r32 extraHeight)",
			"rec RecInflateX(rec rectangle, r32 extraWidth)",
			"rec RecInflateY(rec rectangle, r32 extraHeight)",
			"rec RecInvert(rec rectangle)",
			"rec RecInvertX(rec rectangle)",
			"rec RecInvertY(rec rectangle)",
			"rec RecOverlap(rec rectangle1, rec rectangle2)",
			"rec RecRetract(rec rectangle, r32 subWidth, r32 subHeight)",
			"rec RecRetractX(rec rectangle, r32 subWidth)",
			"rec RecRetractY(rec rectangle, r32 subHeight)",
			"rec RecScale(rec rectangle, r32 scalar)",
			"rec RecScale2(rec rectangle, r32 scaleX, r32 scaleY)",
			"rec RecShift(rec rectangle, r32 amountX, r32 amountY)",
			"rec RecSquarify(rec rectangle, bool makeLarger = true, bool center = true)",
			"rec RecUninvert(rec rectangle)",
			"rec ToRec(reci rectangle)",
			"reci NewReci(v2i topLeft, v2i size)",
			"reci PdAddClipRec(reci rectangle)",
			"reci PdClearClipRec()",
			"reci PdSetClipRec(reci rectangle)",
			"reci ReciBoth(reci rectangle1, reci rectangle2)",
			"reci ReciDeflate(reci rectangle, i32 subWidth, i32 subHeight)",
			"reci ReciDeflateX(reci rectangle, i32 subWidth)",
			"reci ReciDeflateY(reci rectangle, i32 subHeight)",
			"reci ReciExpand(reci rectangle, i32 extraWidth, i32 extraHeight)",
			"reci ReciExpandDown(reci rectangle, i32 extraDown)",
			"reci ReciExpandLeft(reci rectangle, i32 extraLeft)",
			"reci ReciExpandRight(reci rectangle, i32 extraRight)",
			"reci ReciExpandToVec2i(reci rectangle, v2i newPoint)",
			"reci ReciExpandUp(reci rectangle, i32 extraUp)",
			"reci ReciExpandX(reci rectangle, i32 extraWidth)",
			"reci ReciExpandY(reci rectangle, i32 extraHeight)",
			"reci ReciInflate(reci rectangle, i32 extraWidth, i32 extraHeight)",
			"reci ReciInflateX(reci rectangle, i32 extraWidth)",
			"reci ReciInflateY(reci rectangle, i32 extraHeight)",
			"reci ReciInvert(reci rectangle)",
			"reci ReciInvertX(reci rectangle)",
			"reci ReciInvertY(reci rectangle)",
			"reci ReciOverlap(reci rectangle1, reci rectangle2)",
			"reci ReciRetract(reci rectangle, i32 subWidth, i32 subHeight)",
			"reci ReciRetractX(reci rectangle, i32 subWidth)",
			"reci ReciRetractY(reci rectangle, i32 subHeight)",
			"reci ReciScale(reci rectangle, i32 scalar)",
			"reci ReciScale2(reci rectangle, i32 scaleX, i32 scaleY)",
			"reci ReciShift(reci rectangle, i32 amountX, i32 amountY)",
			"reci ReciSquarify(reci rectangle, bool makeLarger = true)",
			"reci ReciUninvert(reci rectangle)",
			"u32 TimeSince(u32 programTimeSnapshot)",
			"u64 EndPerfTime()",
			"u64 FindNextWordBreakInString(MyStr_t str, u64 startIndex, bool forward, bool subwords, bool includeBreakAtStartIndex = false)",
			"u64 FnvHashStr(MyStr_t str)",
			"u64 MarkPerfTime()",
			"u64 StrReplaceInPlace(MyStr_t str, MyStr_t target, MyStr_t replacement, bool ignoreCase = false)",
			"u64 StringBuilderGetNumUnusedBytes(StringBuilder_t* builder, bool includeMemArenaSpace = false, GrowMemToken_t* growTokenOut = nullptr)",
			"u64 TrimLeadingWhitespace(MyStr_t* target, bool trimNewLines = false)",
			"u64 TrimTrailingWhitespace(MyStr_t* target, bool trimNewLines = false)",
			"u64 TrimWhitespace(MyStr_t* target, bool trimNewLines = false)",
			"u64 UnescapeQuotedStringInPlace(MyStr_t* target, bool removeQuotes = true, bool allowNewLineEscapes = true, bool allowOtherEscapeCodes = false)",
			"u8 Dir2BitwiseCount(Dir2_t dir2)",
			"u8 Dir2ExBitwiseCount(Dir2Ex_t dir2ex)",
			"u8 Dir2FlagsFromDir2Ex(Dir2Ex_t dir2ex)",
			"u8 Dir3BitwiseCount(Dir3_t dir3)",
			"u8 Dir3ExBitwiseCount(Dir3Ex_t dir3ex)",
			"u8 GetAxisIndex(Axis_t axis)",
			"u8 GetCcwTurnsBetweenDir2(Dir2_t start, Dir2_t end)",
			"u8 GetCodepointForUtf8Str(MyStr_t str, u64 index, u32* codepointOut = nullptr)",
			"u8 GetCwTurnsBetweenDir2(Dir2_t start, Dir2_t end)",
			"u8 GetDir2ExIndex(Dir2Ex_t dir2ex)",
			"u8 GetDir2Index(Dir2_t dir2)",
			"u8 GetDir3ExIndex(Dir3Ex_t dir3ex)",
			"u8 GetDir3Index(Dir3_t dir3)",
			"u8 GetTurnsBetweenDir3(Dir3_t start, Dir3_t end)",
			"v2 Get2DCornerVecByIndex(u64 cornerIndex)",
			"v2 GetObb2DBottomLeft(obb2 boundingBox)",
			"v2 GetObb2DBottomRight(obb2 boundingBox)",
			"v2 GetObb2DDownVec(obb2 boundingBox)",
			"v2 GetObb2DLeftVec(obb2 boundingBox)",
			"v2 GetObb2DRelativePos(obb2 boundingBox, v2 point)",
			"v2 GetObb2DRightVec(obb2 boundingBox)",
			"v2 GetObb2DTopLeft(obb2 boundingBox)",
			"v2 GetObb2DTopRight(obb2 boundingBox)",
			"v2 GetObb2DUpVec(obb2 boundingBox)",
			"v2 GetObb2DWorldPoint(obb2 boundingBox, v2 relativeOffset)",
			"v2 RotateVec2NumTurnsClockwise(v2 vector, u64 numQuarterTurns)",
			"v2i GetBitmapSize(LCDBitmap* bitmap)",
			"v2i MeasureText(LCDFont* font, MyStr_t text, i32 tracking = 0)",
			"v2i PdSetRenderOffset(v2i offset)",
			"v2i RotateVec2iNumTurnsClockwise(v2i vector, u64 numQuarterTurns)",
			"void BoardLayoutUi(Board_t* board, reci availableRec)",
			"void BoardUpdateConflicts(Board_t* board)",
			"void ClearAppStateStackBeforeClose()",
			"void ClearButtonsMainMenu()",
			"void CursorAddPrevPosition(Cursor_t* cursor, v2i gridPos, Dir2_t moveDir)",
			"void FreeFilesInDir(FilesInDir_t* files)",
			"void FreeStringBuilder(StringBuilder_t* builder)",
			"void GameUiLayout()",
			"void InitBoard(Board_t* board, MyStr_t initialState)",
			"void InitCursor(Cursor_t* cursor, v2i startingPos, Board_t* board)",
			"void InitOffscreenRendering()",
			"void ListFilesCallback(const char* pathNullTerm, void* userdata)",
			"void LoadSaveInfo(Board_t* board, MyStr_t saveInfo)",
			"void MainMenuCheckForSaveFileForBtn(MMenuBtn_t* button)",
			"void MainMenuGotoSubMenu(MMenuSubMenu_t newSubMenu)",
			"void MainMenuMoveSelectionDown()",
			"void MainMenuMoveSelectionUp()",
			"void MicroDelay(unsigned int milliseconds)",
			"void NewStringBuilder(StringBuilder_t* builder, MemArena_t* memArena, u64 initialRequiredCapacity = 0)",
			"void OffscreenRenderingBeginFrame()",
			"void PdBeginFrame()",
			"void PdDrawLine(v2i start, v2i end, i32 width, LCDColor color = kColorBlack)",
			"void PdDrawOffscreenResults(OffscreenTarget_t target, reci drawRec, Dir2_t rotation = Dir2_Right)",
			"void PdDrawRec(reci drawRec, LCDColor color = kColorBlack)",
			"void PdDrawRecOutline(reci drawRec, i32 thickness, bool outside = false, LCDColor color = kColorBlack)",
			"void PdDrawSheetFrame(SpriteSheet_t sheet, v2i frame, reci drawRec)",
			"void PdDrawSheetFrame(SpriteSheet_t sheet, v2i frame, v2i position)",
			"void PdDrawText(MyStr_t text, v2i position)",
			"void PdDrawTextPrint(v2i position, const char* formatString, ...)",
			"void PdDrawTexturedObb(Texture_t texture, obb2 drawObb)",
			"void PdDrawTexturedRec(Texture_t texture, reci drawRec)",
			"void PdDrawTexturedRec(Texture_t texture, reci drawRec)",
			"void PdDrawTexturedRecPart(Texture_t texture, reci drawRec, reci sourceRec, Dir2_t rotation = Dir2_Right)",
			"void PdPopOffscreenTarget(OffscreenTarget_t target)",
			"void PdPushOffscreenTarget(OffscreenTarget_t target)",
			"void PlaceButtonsListMainMenu()",
			"void PostRenderGame()",
			"void PostUpdateGame()",
			"void PreRenderGame()",
			"void PreUpdateGame()",
			"void RecAlign(rec* rectangleOut, r32 alignmentScale = 1.0f)",
			"void RecAlignSize(rec* rectangleOut, r32 alignmentScale = 1.0f)",
			"void RecAlignTopLeft(rec* rectangleOut, r32 alignmentScale = 1.0f)",
			"void RecLayoutBetweenX(rec* rectangleOut, r32 leftSide, r32 rightSide, r32 leftMargin = 0, r32 rightMargin = 0, r32 minWidth = 0)",
			"void RecLayoutBetweenY(rec* rectangleOut, r32 topSide, r32 bottomSide, r32 topMargin = 0, r32 bottomMargin = 0, r32 minHeight = 0)",
			"void RecLayoutBottomOf(rec* rectangleOut, r32 posOfThingUpwards, r32 topPadding = 0.0f)",
			"void RecLayoutBottomPortionOf(rec* rectangleOut, rec* otherRectangle, r32 portionHeight, bool shrinkOtherRec = false, r32 offsetAmount = 0)",
			"void RecLayoutHorizontalCenter(rec* rectangleOut, rec otherRectangle, r32 percentage = 0.5f)",
			"void RecLayoutLeftOf(rec* rectangleOut, r32 posOfThingToRight, r32 rightPadding = 0.0f)",
			"void RecLayoutLeftPortionOf(rec* rectangleOut, rec* otherRectangle, r32 portionWidth, bool shrinkOtherRec = false, r32 offsetAmount = 0)",
			"void RecLayoutRightOf(rec* rectangleOut, r32 posOfThingToLeft, r32 leftPadding = 0.0f)",
			"void RecLayoutRightPortionOf(rec* rectangleOut, rec* otherRectangle, r32 portionWidth, bool shrinkOtherRec = false, r32 offsetAmount = 0)",
			"void RecLayoutTopOf(rec* rectangleOut, r32 posOfThingDownwards, r32 bottomPadding = 0.0f)",
			"void RecLayoutTopPortionOf(rec* rectangleOut, rec* otherRectangle, r32 portionHeight, bool shrinkOtherRec = false, r32 offsetAmount = 0)",
			"void RecLayoutVerticalCenter(rec* rectangleOut, rec otherRectangle, r32 percentage = 0.5f)",
			"void RegisterAppState_Game()",
			"void RegisterAppState_MainMenu()",
			"void RenderAppState_MainMenu(bool isOnTop)",
			"void RenderBoard(Board_t* board, Cursor_t* cursor, bool completed)",
			"void SetCurrentLevel(MyStr_t levelPath)",
			"void SplitFilePath(MyStr_t fullPath, MyStr_t* directoryOut, MyStr_t* fileNameOut, MyStr_t* extensionOut = nullptr)",
			"void StartAppState_Game(bool initialize, AppState_t prevState, MyStr_t transitionStr)",
			"void StartAppState_MainMenu(bool initialize, AppState_t prevState, MyStr_t transitionStr)",
			"void StartPerfTime()",
			"void StopAppState_Game(bool deinitialize, AppState_t nextState)",
			"void StopAppState_MainMenu(bool deinitialize, AppState_t nextState)",
			"void StrReallocAppend(MyStr_t* baseStr, MyStr_t appendStr, MemArena_t* memArena)",
			"void StrSpliceInPlace(MyStr_t target, u64 startIndex, MyStr_t replacement)",
			"void StringBuilderAllocMoreMem(StringBuilder_t* builder, u64 spaceRequired)",
			"void StringBuilderAppend(StringBuilder_t* builder, MyStr_t str)",
			"void StringBuilderAppendLine(StringBuilder_t* builder, const char* nullTermStr = \"\")",
			"void StringBuilderAppendPrint(StringBuilder_t* builder, const char* formatString, ...)",
			"void StringBuilderAppendPrintLine(StringBuilder_t* builder, const char* formatString, ...)",
			"void StringBuilderAppendPrintVa(StringBuilder_t* builder, const char* formatString, va_list args1, va_list args2)",
			"void StringBuilderClear(StringBuilder_t* builder, bool deallocate = false)",
			"void StringBuilderPrint(StringBuilder_t* builder, const char* formatString, ...)",
			"void StringBuilderSet(StringBuilder_t* builder, MyStr_t str)",
			"void StringBuilderShrink(StringBuilder_t* builder, bool deallocateIfNoChars = true)",
			"void UpdateAppState_Game()",
			"void UpdateAppState_MainMenu()",
			"void UpdateCursor(Cursor_t* cursor, Board_t* board)",
		],
		"custom_globals":
		[
			"game",
			"gl",
			"mainHeap",
			"mmenu",
		],
		"custom_types":
		[
			"AppState_t",
			"Axis_t",
			"Box_t",
			"Boxi_t",
			"CellFlag_t",
			"Cell_t",
			"CursorPrevPos_t",
			"Cursor_t",
			"Dir2Ex_t",
			"Dir2_t",
			"Dir3Ex_t",
			"Dir3_t",
			"FilesInDirContext_t",
			"FilesInDir_t",
			"GameGlobals_t",
			"GameState_t",
			"MMenuAction_t",
			"MMenuBtn_t",
			"MainMenuState_t",
			"MyStr_t",
			"MyWideStr_t",
			"Obb2D_t",
			"OffscreenBitmap_t",
			"OffscreenRenderState_t",
			"OffscreenTarget_t",
			"Rectangle_t",
			"Rectanglei_t",
			"StringBuilder_t",
			"WordBreakCharClass_t",
			"box",
			"boxi",
			"obb2",
			"obb3",
			"rec",
			"reci",
		],
	},
}
