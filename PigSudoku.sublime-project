{
	"folders":
	[
		{
			"path": ".",
			"folder_exclude_patterns": [
				"engine",
				"lib",
				"build/PigSudoku.pdx",
			],
		},
		{
			"name": "PigEngine (Playdate)",
			"path": "engine/platform/playdate",
		},
		{
			"name": "GyLib",
			"path": "lib/include/gylib",
		},
		{
			"path": "F:\\Programs\\PlaydateSDK",
			"folder_exclude_patterns":
			[
				".sentry-native",
				"bin",
				"Designing for Playdate",
				"Disk",
				"Inside Playdate",
				"PlaydateSDK.docset",
				"resources",
				"C_API/buildsupport",
				"CoreLibs/assets",
			],
			"file_exclude_patterns":
			[
				"*.html",
				"*.css",
			],
		},
	],
	"settings":
	{
		"build_options":
		[
		],
		"custom_constants":
		[
			"AppState_Game",
			"AppState_MainMenu",
			"AppState_None",
			"AppState_NumStates",
			"BOARD_HEIGHT",
			"BOARD_MARGIN",
			"BOARD_OUTLINE_THICKNESS",
			"BOARD_WIDTH",
			"CELL_DIVIDER_THICKNESS",
			"CURSOR_INNER_MARGIN",
			"CURSOR_MAX_PREV_POSITIONS",
			"CURSOR_NOTE_TAKING_ANIM_TIME",
			"CURSOR_OUTLINE_THICKNESS",
			"CURSOR_PREV_POS_ANIM_TIME",
			"CellFlag_Conflict",
			"CellFlag_Filled",
			"CellFlag_IsGiven",
			"CellFlag_None",
			"CellFlag_NumFlags",
			"FIRST_APP_STATE",
			"GAME_COMPLETION_ANIM_TIME",
			"GAME_VERSION_BUILD",
			"GAME_VERSION_MAJOR",
			"GAME_VERSION_MINOR",
			"GROUP_DIVIDER_THICKNESS",
			"GROUP_HEIGHT",
			"GROUP_WIDTH",
			"MAIN_FONT_PATH",
			"MAX_NUM_PERF_TIMERS",
			"MIN_CELL_SIZE",
			"MMENU_BTN_FONT_PATH",
			"MMENU_BTN_HORIZONTAL_PADDING",
			"MMENU_BTN_SPACING",
			"MMENU_BTN_TOP_BOTTOM_MARGIN",
			"MMENU_BTN_VERTICAL_PADDING",
			"MMENU_CRANK_MOVE_DELTA",
			"MMENU_LEVEL_BTN_FONT_PATH",
			"MMENU_LEVEL_BTN_HORIZONTAL_PADDING",
			"MMENU_LEVEL_BTN_VERTICAL_PADDING",
			"MMENU_NUM_SAVE_FILE_CHECKS_PER_FRAME",
			"MMENU_SCROLL_LAG",
			"MMENU_SCROLL_PAST",
			"MMENU_TITLE_FONT_PATH",
			"MMenuAction_Back",
			"MMenuAction_Exit",
			"MMenuAction_Level",
			"MMenuAction_None",
			"MMenuAction_NumActions",
			"MMenuAction_Play",
			"MMenuAction_Settings",
			"MMenuSubMenu_LevelSelect",
			"MMenuSubMenu_None",
			"MMenuSubMenu_NumSubMenus",
			"MMenuSubMenu_Options",
			"MyStr_Empty",
			"MyStr_Empty_Const",
			"NUM_US_PER_DAY",
			"NUM_US_PER_HOUR",
			"NUM_US_PER_MINUTE",
			"NUM_US_PER_SECOND",
			"PERF_FORMAT_STR",
			"PLAYDATE_SCREEN_HEIGHT",
			"PLAYDATE_SCREEN_WIDTH",
			"WordBreakCharClass_AlphabeticLower",
			"WordBreakCharClass_AlphabeticUpper",
			"WordBreakCharClass_NumClasses",
			"WordBreakCharClass_Numeric",
			"WordBreakCharClass_Other",
			"WordBreakCharClass_Punctuation",
			"WordBreakCharClass_PunctuationClose",
			"WordBreakCharClass_PunctuationOpen",
			"WordBreakCharClass_Whitespace",
			"WordBreakCharClass_WordPunctuation",
		],
		"custom_functions":
		[
			"#define AllocString(arena, strPntr)",
			"#define AssertNullTerm(strPntr)",
			"#define AssertNullTerm_(strPntr)",
			"#define FreeString(arena, strPntr)",
			"#define NewStringInArena(arena, length, charPntr)",
			"#define NewStringInArenaNt(arena, nullTermStr)",
			"#define NotEmptyStr(strPntr)",
			"#define NotEmptyStr_(strPntr)",
			"#define NotNullStr(strPntr)",
			"#define NotNullStr_(strPntr)",
			"#define PERF_FORMAT(timeValueUsU64)",
			"#define StrPntrPrint(myStrPntr)",
			"#define StrPrint(myStrStruct)",
			"AppState_t InitGame()",
			"BitmapData_t GetBitmapData(LCDBitmap* bitmap, bool sizeOnly = false)",
			"Cell_t* GetCell(Board_t* board, v2i gridPos)",
			"Cell_t* GetSelectedCell(Board_t* board, Cursor_t* cursor)",
			"FilesInDir_t GetFilesInDirectory(MyStr_t path, MemArena_t* memArena, bool includeFolders = false, bool fileNameOnly = false, bool showHidden = false)",
			"Font_t* PdBindFont(Font_t* font)",
			"LCDBitmapDrawMode PdSetDrawMode(LCDBitmapDrawMode drawMode)",
			"MMenuBtn_t* AddButtonMainMenu(MMenuAction_t action, MyStr_t displayText, MyStr_t path = MyStr_Empty_Const)",
			"MyStr_t CombineStrs(MemArena_t* memArena, MyStr_t str1, MyStr_t str2)",
			"MyStr_t ConvertUcs2StrToUtf8(MemArena_t* memArena, const wchar_t* wideStrPntr, u64 wideStrLength)",
			"MyStr_t ConvertUcs2StrToUtf8Nt(MemArena_t* memArena, const wchar_t* nullTermWideStr)",
			"MyStr_t FindStrParensPart(MyStr_t target, char openParensChar = '[', char closeParensChar = ']')",
			"MyStr_t FormatBytes(u64 numBytes, MemArena_t* memArena)",
			"MyStr_t FormatMilliseconds(u64 milliseconds, MemArena_t* memArena)",
			"MyStr_t FormatNumberWithCommas(u64 number, MemArena_t* memArena = nullptr)",
			"MyStr_t FormatRealTime(const RealTime_t* realTime, MemArena_t* memArena, bool includeDayOfWeek = true, bool includeHourMinuteSecond = true, bool includeMonthDayYear = true)",
			"MyStr_t GetDirectoryPart(MyStr_t filePath)",
			"MyStr_t GetFileNamePart(MyStr_t filePath, bool includeExtension = true)",
			"MyStr_t GetLevelSaveFilePath(MemArena_t* memArena, MyStr_t levelPath, bool completed)",
			"MyStr_t NewStr(u64 length, char* pntr)",
			"MyStr_t NewStrLengthOnly(u64 length)",
			"MyStr_t PrintInArenaStr(MemArena_t* arena, const char* formatString, ...)",
			"MyStr_t StrReplace(MyStr_t str, MyStr_t target, MyStr_t replacement, MemArena_t* memArena)",
			"MyStr_t StrSplice(MyStr_t target, u64 startIndex, u64 endIndex, MyStr_t replacement, MemArena_t* memArena)",
			"MyStr_t StrSubstring(MyStr_t* target, u64 startIndex, u64 endIndex)",
			"MyStr_t StrSubstringLength(MyStr_t* target, u64 startIndex, u64 length)",
			"MyStr_t StringRepeat(MemArena_t* memArena, MyStr_t str, u64 numRepetitions)",
			"MyStr_t TakeString(StringBuilder_t* builder, MemArena_t* memArena = nullptr)",
			"MyStr_t ToMyStr(const StringBuilder_t* builder)",
			"MyStr_t UnescapeQuotedStringInArena(MemArena_t* memArena, MyStr_t target, bool removeQuotes = true, bool allowNewLineEscapes = true, bool allowOtherEscapeCodes = false)",
			"MyStr_t* SplitString(MemArena_t* memArena, MyStr_t target, MyStr_t delineator, u64* numPiecesOut = nullptr, bool ignoreCase = false)",
			"MyWideStr_t ConvertUtf8StrToUcs2(MemArena_t* memArena, MyStr_t utf8Str)",
			"SpriteSheet_t LoadSpriteSheet(MyStr_t path, i32 numFramesX)",
			"Texture_t CreateTexture(v2i size, u64 dataSize, const u8* pixelData, const u8* maskData)",
			"Texture_t LoadTexture(MyStr_t path)",
			"WordBreakCharClass_t GetWordBreakCharClass(u32 codepoint)",
			"bool BoardCheckCompletion(Board_t* board)",
			"bool BufferIsNullTerminated(u64 bufferSize, const char* bufferPntr)",
			"bool DeleteFile(MyStr_t path)",
			"bool DeleteFolder(MyStr_t path)",
			"bool DoesFileExist(bool fromDataDir, MyStr_t path)",
			"bool DoesStrContainMultibyteUtf8Characters(MyStr_t str)",
			"bool FindNextCharInStr(MyStr_t target, u64 startIndex, MyStr_t searchCharsStr, u64* indexOut = nullptr, bool ignoreCharsInQuotes = false)",
			"bool FindNextUnknownCharInStr(MyStr_t target, u64 startIndex, MyStr_t knownCharsStr, u64* indexOut = nullptr, bool ignoreCharsInQuotes = false)",
			"bool FindNextWhitespaceInStr(MyStr_t target, u64 startIndex, u64* indexOut = nullptr, bool ignoreCharsInQuotes = false)",
			"bool FindSubstring(MyStr_t target, MyStr_t substring, u64* indexOut = nullptr, bool ignoreCase = false, u64 startIndex = 0)",
			"bool IsCharPairWordBreak(u32 prevCodepoint, u32 nextCodepoint, bool forward, bool subwords)",
			"bool IsEmptyStr(MyStr_t target)",
			"bool IsNullStr(MyStr_t target)",
			"bool IsStrNullTerminated(MyStr_t target)",
			"bool IsStringValidIdentifier(MyStr_t str, bool allowUnderscores = true, bool allowNumbers = true, bool allowLeadingNumbers = false, bool allowEmpty = false, bool allowSpaces = false)",
			"bool ReadEntireFile(bool fromDataDir, MyStr_t path, MyStr_t* contentsOut, MemArena_t* memArena)",
			"bool SplitStringFixed(MyStr_t target, MyStr_t delineator, u64 numPieces, MyStr_t* piecesBuffer, bool ignoreCase = false)",
			"bool StrEndsWith(MyStr_t str, MyStr_t suffix, bool ignoreCase = false)",
			"bool StrEndsWithSlash(MyStr_t str)",
			"bool StrEquals(MyStr_t target, MyStr_t comparison)",
			"bool StrEqualsIgnoreCase(MyStr_t target, MyStr_t comparison)",
			"bool StrStartsWith(MyStr_t str, MyStr_t prefix, bool ignoreCase = false)",
			"bool StrStartsWithSlash(MyStr_t str)",
			"bool WriteEntireFile(MyStr_t path, MyStr_t contents)",
			"char* ToStr(StringBuilder_t* builder)",
			"const char* FormatBytesNt(u64 numBytes, MemArena_t* memArena)",
			"const char* FormatMillisecondsNt(u64 milliseconds, MemArena_t* memArena)",
			"const char* FormatNumberWithCommasNt(u64 number, MemArena_t* memArena = nullptr)",
			"const char* FormatRealTimeNt(const RealTime_t* realTime, MemArena_t* memArena, bool includeDayOfWeek = true, bool includeHourMinuteSecond = true, bool includeMonthDayYear = true)",
			"const char* GetAppStateStr(AppState_t enumValue)",
			"const char* GetCellFlagStr(CellFlag_t enumValue)",
			"const char* GetFileNamePartNt(const char* filePath)",
			"const char* GetMMenuActionStr(MMenuAction_t enumValue)",
			"const char* GetMMenuSubMenuStr(MMenuSubMenu_t enumValue)",
			"const char* GetPDLanguageStr(PDLanguage language)",
			"const char* GetPDSystemEventStr(PDSystemEvent event)",
			"const char* GetWordBreakCharClassStr(WordBreakCharClass_t enumValue)",
			"i32 StrCompareIgnoreCase(MyStr_t str1, MyStr_t str2)",
			"reci PdAddClipRec(reci rectangle)",
			"reci PdClearClipRec()",
			"reci PdSetClipRec(reci rectangle)",
			"u32 TimeSince(u32 programTimeSnapshot)",
			"u64 EndPerfTime()",
			"u64 FindNextWordBreakInString(MyStr_t str, u64 startIndex, bool forward, bool subwords, bool includeBreakAtStartIndex = false)",
			"u64 FnvHashStr(MyStr_t str)",
			"u64 MarkPerfTime()",
			"u64 StrReplaceInPlace(MyStr_t str, MyStr_t target, MyStr_t replacement, bool ignoreCase = false)",
			"u64 StringBuilderGetNumUnusedBytes(StringBuilder_t* builder, bool includeMemArenaSpace = false, GrowMemToken_t* growTokenOut = nullptr)",
			"u64 TrimLeadingWhitespace(MyStr_t* target, bool trimNewLines = false)",
			"u64 TrimTrailingWhitespace(MyStr_t* target, bool trimNewLines = false)",
			"u64 TrimWhitespace(MyStr_t* target, bool trimNewLines = false)",
			"u64 UnescapeQuotedStringInPlace(MyStr_t* target, bool removeQuotes = true, bool allowNewLineEscapes = true, bool allowOtherEscapeCodes = false)",
			"u8 GetCodepointForUtf8Str(MyStr_t str, u64 index, u32* codepointOut = nullptr)",
			"v2i GetBitmapSize(LCDBitmap* bitmap)",
			"v2i MeasureText(LCDFont* font, MyStr_t text, i32 tracking = 0)",
			"void BoardLayoutUi(Board_t* board, reci availableRec)",
			"void BoardUpdateConflicts(Board_t* board)",
			"void ClearAppStateStackBeforeClose()",
			"void ClearButtonsMainMenu()",
			"void CursorAddPrevPosition(Cursor_t* cursor, v2i gridPos, Dir2_t moveDir)",
			"void FreeFilesInDir(FilesInDir_t* files)",
			"void FreeStringBuilder(StringBuilder_t* builder)",
			"void GameUiLayout()",
			"void InitBoard(Board_t* board, MyStr_t initialState)",
			"void InitCursor(Cursor_t* cursor, v2i startingPos, Board_t* board)",
			"void ListFilesCallback(const char* pathNullTerm, void* userdata)",
			"void LoadSaveInfo(Board_t* board, MyStr_t saveInfo)",
			"void MainMenuCheckForSaveFileForBtn(MMenuBtn_t* button)",
			"void MainMenuGotoSubMenu(MMenuSubMenu_t newSubMenu)",
			"void MainMenuMoveSelectionDown()",
			"void MainMenuMoveSelectionUp()",
			"void MicroDelay(unsigned int milliseconds)",
			"void NewStringBuilder(StringBuilder_t* builder, MemArena_t* memArena, u64 initialRequiredCapacity = 0)",
			"void PdBeginFrame()",
			"void PdDrawLine(v2i start, v2i end, i32 width, LCDColor color = kColorBlack)",
			"void PdDrawRec(reci drawRec, LCDColor color = kColorBlack)",
			"void PdDrawRecOutline(reci drawRec, i32 thickness, bool outside = false, LCDColor color = kColorBlack)",
			"void PdDrawSheetFrame(SpriteSheet_t sheet, v2i frame, reci drawRec)",
			"void PdDrawSheetFrame(SpriteSheet_t sheet, v2i frame, v2i position)",
			"void PdDrawText(MyStr_t text, v2i position)",
			"void PdDrawTextPrint(v2i position, const char* formatString, ...)",
			"void PdDrawTexturedRec(LCDBitmap* bitmap, v2i bitmapSize, reci drawRec)",
			"void PdDrawTexturedRec(Texture_t texture, reci drawRec)",
			"void PdDrawTexturedRecPart(Texture_t texture, reci drawRec, reci sourceRec)",
			"void PdSetRenderOffset(v2i offset)",
			"void PlaceButtonsListMainMenu()",
			"void PostRenderGame()",
			"void PostUpdateGame()",
			"void PreRenderGame()",
			"void PreUpdateGame()",
			"void RegisterAppState_Game()",
			"void RegisterAppState_MainMenu()",
			"void RenderAppState_MainMenu(bool isOnTop)",
			"void RenderBoard(Board_t* board, Cursor_t* cursor, bool completed)",
			"void SetCurrentLevel(MyStr_t levelPath)",
			"void SplitFilePath(MyStr_t fullPath, MyStr_t* directoryOut, MyStr_t* fileNameOut, MyStr_t* extensionOut = nullptr)",
			"void StartAppState_Game(bool initialize, AppState_t prevState, MyStr_t transitionStr)",
			"void StartAppState_MainMenu(bool initialize, AppState_t prevState, MyStr_t transitionStr)",
			"void StartPerfTime()",
			"void StopAppState_Game(bool deinitialize, AppState_t nextState)",
			"void StopAppState_MainMenu(bool deinitialize, AppState_t nextState)",
			"void StrReallocAppend(MyStr_t* baseStr, MyStr_t appendStr, MemArena_t* memArena)",
			"void StrSpliceInPlace(MyStr_t target, u64 startIndex, MyStr_t replacement)",
			"void StringBuilderAllocMoreMem(StringBuilder_t* builder, u64 spaceRequired)",
			"void StringBuilderAppend(StringBuilder_t* builder, MyStr_t str)",
			"void StringBuilderAppendLine(StringBuilder_t* builder, const char* nullTermStr = \"\")",
			"void StringBuilderAppendPrint(StringBuilder_t* builder, const char* formatString, ...)",
			"void StringBuilderAppendPrintLine(StringBuilder_t* builder, const char* formatString, ...)",
			"void StringBuilderAppendPrintVa(StringBuilder_t* builder, const char* formatString, va_list args1, va_list args2)",
			"void StringBuilderClear(StringBuilder_t* builder, bool deallocate = false)",
			"void StringBuilderPrint(StringBuilder_t* builder, const char* formatString, ...)",
			"void StringBuilderSet(StringBuilder_t* builder, MyStr_t str)",
			"void StringBuilderShrink(StringBuilder_t* builder, bool deallocateIfNoChars = true)",
			"void UpdateAppState_Game()",
			"void UpdateAppState_MainMenu()",
			"void UpdateCursor(Cursor_t* cursor, Board_t* board)",
		],
		"custom_globals":
		[
			"game",
			"gl",
			"mainHeap",
			"mmenu",
		],
		"custom_types":
		[
			"AppState_t",
			"CellFlag_t",
			"Cell_t",
			"CursorPrevPos_t",
			"Cursor_t",
			"FilesInDirContext_t",
			"FilesInDir_t",
			"GameGlobals_t",
			"GameState_t",
			"MMenuAction_t",
			"MMenuBtn_t",
			"MainMenuState_t",
			"MyStr_t",
			"MyWideStr_t",
			"StringBuilder_t",
			"WordBreakCharClass_t",
		],
	},
}
